---
title: "R Notebook"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}

library(ggplot2)
library(lubridate)
library(Scale)
library(reshape2)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(stringr)
library(syuzhet) 
library(dplyr ) 


```



```{r}
#Read data


chat <- read.csv("_chat.txt",
                 header = FALSE, sep = ";",
                 na.strings="", stringsAsFactors = FALSE)

#Overview
#cat("Rows without time stamp:", length(grep("^\\D", chat[,1])),
    "(", grep("^\\D", chat[,1]), ")", "\n")

#Add 5 empty rows to the end to make space for shifting
chat <- cbind(chat, matrix(nrow = nrow(chat), ncol = 5))

#Shift stampless rows 5 cols to the left, fill with NAs
#cat("Shifting rows without time stamp...", "\n")

for(row in grep("^\\D", chat[,1])){
      end <- which(is.na(chat[row,]))[1] #first column without text in it
      chat[row, 6:(5+end)]<- chat[row, 1:(end-1)]
      chat[row, 1:(end-1)] <- NA
}

#Delete entirely empty rows
chat <- chat[-which(apply(chat, 1, function(x) all(is.na(x))) == TRUE),]

#Clean surname column
cat("Cleaning surname column from chat content...", "\n")

#Delete rows without ":" in either column 3 nor 4.
#Those are not messages but activities like adding members to a group chat
chat <-chat[grepl(".+:$", chat[,5]) |
                  grepl(".+:$", chat[,4]) | 
                  is.na(chat[,1]), ]

#Filter column 4. Shift everything that's not a surname
#to the first column without content
for(row in which(!grepl(".+:$", chat[,5]))){
      end <- which(is.na(chat[row,]))[1] #first column without chat content
      chat[row,end]<- chat[row,5]
      chat[row,5] <- NA
}
View(chat)
#Copy time stamp and name of row above for rows w/o time stamp
cat("Filling in timestamps, deleting spare columns...", "\n")
for(row in which(is.na(chat[,1]))){
      chat[row,1:5] <- chat[(row-1), 1:5]
}

#Delete column 3, contains only "-"
chat <- chat[,-3]

#Convert columns 1 and 2 to date format

#Merge columns 1 and 2 (date and time) to simplify things
chat[,1] <- paste(chat[,1], chat[,2])
#Remove now redundant second column
chat <- chat[,-2]

#Name the first three columns
colnames(chat)[1:3] <- c("time", "name", "surname")

#Convert the first column into a 'Posixlt' object.
chat$time <- strptime(chat$time, "%d.%m.%Y, %H:%M")

#Remove the colon at the end of the names

chat$name <- gsub(":$", "", chat$name)
chat$surname <- gsub(":$", "", chat$surname)

#Save R object for the visualization part
save(chat, file = "whatsapp_cleaned.Rdata")
View(chat)

cat("Done.")
```



#get the data from whatsapp chat 
```{r}

text <- readLines("_chat.txt")

#let us create the corpus
docs <- Corpus(VectorSource(text))

#clean our chat data
trans <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, trans, "/")
docs <- tm_map(docs, trans, "@")
docs <- tm_map(docs, trans, "\\|")
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removeWords, c("sudharsan","friendName"))
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs, stemDocument)
```


```{r}


library(tidytext)
#create the document term matrix



dtm <- TermDocumentMatrix(docs)
data<- tidy(dtm)
str(data)
mat <- removeSparseTerms(dtm, sparse = 0.2)
mat <- as.matrix(tdm2)




ap_sentiments <- data %>%
  inner_join(get_sentiments("bing"), by = c(term = "word"))
library(ggplot2)

ap_sentiments %>%
  count(sentiment, term, wt = count) %>%
  ungroup() %>%
  filter(n >= 150) %>%
  mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
  mutate(term = reorder(term, n)) %>%
  ggplot(aes(term, n, fill = sentiment)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  ylab("Contribution to sentiment")+
    coord_flip()







v <- sort(rowSums(mat),decreasing=TRUE)

#Data frame
data <- data.frame(word = names(v),freq=v)
head(data, 10)


#generate the wordcloud
set.seed(1056)
wordcloud(words = data$word, freq = data$freq, min.freq = 1,
          max.words=200, random.order=FALSE, rot.per=0.35,
          colors=brewer.pal(8, "Dark2"))

#fetch sentiment words from texts
Sentiment <- get_nrc_sentiment(texts)
head(Sentiment)
text <- cbind(texts,Sentiment)

#count the sentiment words by category
TotalSentiment <- data.frame(colSums(text[,c(2:11)]))
names(TotalSentiment) <- "count"
TotalSentiment <- cbind("sentiment" = rownames(TotalSentiment), TotalSentiment)
rownames(TotalSentiment) <- NULL

#total sentiment score of all texts
ggplot(data = TotalSentiment, aes(x = sentiment, y = count)) +
geom_bar(aes(fill = sentiment), stat = "identity") +
theme(legend.position = "none") +
xlab("Sentiment") + ylab("Total Count") + ggtitle("Total Sentiment Score")







```